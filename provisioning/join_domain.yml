---
  - name: Playbook to join hosts to Active Directory domain
    hosts: "{{ match_host }}"
    become: yes
    handlers:
      - name: restart auth services
        service:
          name: "{{ item }}"
          state: restarted
        with_items:
          - sssd
          - realmd
    tasks:
      - name: Join Ubuntu host to the domain
        block:
          - name: Install the required packages
            apt:
              name: 
                - realmd
                - sssd-krb5
                - sssd-ad
                - sssd
                - python3-pip
                - packagekit
                #- oddjob
                #- oddjob-mkhomedir
              update_cache: yes
              state: present
          - name: Check if server is already a domain member
            shell: "realm list | grep -i -q {{ ADDomain }} && echo -n JOINED || echo -n NOTJOINED"
            register: domain_check
            changed_when: domain_check.stdout != 'JOINED'
          - name: Install pexpect using pip
            pip:
              name: pexpect
            when: domain_check.changed
          - name: Join system to AD and add the computer object in the Linux OU
            expect:
              command: "/bin/bash -c \"/usr/sbin/realm join -v -U {{ ADJoinUsername }} {{ ADDomain }}\""
              timeout: 30
              responses:
                Password for *: "{{ ADJoinPassword }}"
            notify: restart auth services
            when: domain_check.changed
          - name: Configure sssd.conf
            template:
              src: sssd.j2
              dest: /etc/sssd/sssd.conf
            notify: restart auth services
          - name: Enable home directory creation on login
            block:
              - name: Write /usr/share/pam-configs/mkhomedir file
                template:
                  src: mkhomedir.j2
                  dest: /usr/share/pam-configs/mkhomedir
                notify: restart auth services
              - name: Enable /usr/share/pam-configs/mkhomedir config
                command: pam-auth-update --enable mkhomedir
                notify: restart auth services
          - name: Allow AD group to sudo
            template:
              src: sudo-ad-group.j2
              dest: /etc/sudoers.d/{{ ADAdminGroup|replace(' ', '_') }}
          - name: Insert/Update "Match User" configuration block in /etc/ssh/sshd_config
            ansible.builtin.blockinfile:
              path: /etc/ssh/sshd_config
              block: |
                AuthorizedKeysCommand /usr/bin/sss_ssh_authorizedkeys
                AuthorizedKeysCommandUser root
            notify: restart auth services
          - name: Start and enable the realmd service
            service:
              name: realmd
              state: started
              enabled: yes
          - name: Start and enable the sssd service
            service:
              name: sssd
              state: started
              enabled: yes
        when: ansible_distribution == 'Ubuntu'
      - name: Join RHEL host to the domain
        block:
          - name: Install the required packages
            yum:
              name: realmd, oddjob-mkhomedir, sssd-krb5, sssd-ad, krb5-workstation, oddjob, oddjob-mkhomedir, sssd, samba-common-tools
              state: present
          - name: Check if server is already a domain member
            shell: "realm list | grep -i -q {{ ADDomain }} && echo -n JOINED || echo -n NOTJOINED"
            register: domain_check
            changed_when: domain_check.stdout != 'JOINED'
          - name: Install pexpect using pip
            pip:
              name: pexpect
              executable: pip3
            when: domain_check.changed
          - name: Join system to AD and add the computer object in the Linux OU
            expect:
              command: "/bin/bash -c \"/usr/sbin/realm join -v -U {{ ADJoinUsername }} {{ ADDomain }}\""
              timeout: 30
              responses:
                Password for *: "{{ ADJoinPassword }}"
            notify: restart auth services
            when: domain_check.changed
          - name: Configure use_fully_qualified_names in sssd.conf
            ansible.builtin.lineinfile:
              path: /etc/sssd/sssd.conf
              regexp: '^use_fully_qualified_names = '
              line: use_fully_qualified_names = False
              insertafter: '^\[domain/(.*?)\]$'
            notify: restart auth services
          - name: Configure override_homedir in sssd.conf
            ansible.builtin.lineinfile:
              path: /etc/sssd/sssd.conf
              regexp: '^override_homedir = '
              line: override_homedir = /home/%u
              insertafter: '^\[domain/(.*?)\]$'
            notify: restart auth services
          - name: Configure ad_gpo_ignore_unreadable in sssd.conf
            ansible.builtin.lineinfile:
              path: /etc/sssd/sssd.conf
              regexp: '^ad_gpo_ignore_unreadable = '
              line: ad_gpo_ignore_unreadable = True
              insertafter: '^\[domain/(.*?)\]$'
            notify: restart auth services
          - name: Configure ad_gpo_access_control in sssd.conf
            ansible.builtin.lineinfile:
              path: /etc/sssd/sssd.conf
              regexp: '^ad_gpo_access_control = '
              line: ad_gpo_access_control = disabled
              insertafter: '^\[domain/(.*?)\]$'
            notify: restart auth services
          - name: Configure override_gid in sssd.conf
            ansible.builtin.lineinfile:
              path: /etc/sssd/sssd.conf
              regexp: '^override_gid = '
              line: override_gid = 1004
              insertafter: '^\[domain/(.*?)\]$'
            notify: restart auth services
          - name: Configure ad_enabled_domains in sssd.conf
            ansible.builtin.lineinfile:
              path: /etc/sssd/sssd.conf
              regexp: '^ad_enabled_domains = '
              line: "ad_enabled_domains = {{ ADDomain | lower }}"
              insertafter: '^\[domain/(.*?)\]$'
            notify: restart auth services
          - name: Configure ignore_group_members in sssd.conf
            ansible.builtin.lineinfile:
              path: /etc/sssd/sssd.conf
              regexp: '^ignore_group_members = '
              line: ignore_group_members = True
              insertafter: '^\[domain/(.*?)\]$'
            notify: restart auth services
          - name: Configure udp_preference_limit in /etc/krb5.conf
            ansible.builtin.lineinfile:
              path: /etc/krb5.conf
              regexp: '^udp_preference_limit = '
              line: "udp_preference_limit = 1"
              insertafter: '^\[libdefaults\]$'
            notify: restart auth services
          - name: Start and enable the realmd service
            service:
              name: realmd
              state: started
              enabled: yes
          - name: Start and enable the sssd service
            service:
              name: sssd
              state: started
              enabled: yes
        when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'
